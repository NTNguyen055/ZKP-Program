pragma circom 2.1.6;

// include "https://github.com/0xPARC/circom-secp256k1/blob/master/circuits/bigint.circom";

include "circomlib/poseidon.circom";
include "circomlib/comparators.circom";

template CheckRange9() {
    signal input in;
    signal output isValid;

    component lt10 = LessThan(4); // Check in < 10
    component lt1  = LessThan(4); // Check in < 1

    lt10.in[0] <== in;
    lt10.in[1] <== 10;

    lt1.in[0] <== in;
    lt1.in[1] <== 1;

    // Equivalent to: (1 - lt1.out) * lt10.out
    isValid <== (1 - lt1.out) * lt10.out;
}

template SudokuRangeValidator() {
    signal input board[9][9];
    signal output isValid;

    component checkers[9][9];
    signal products[9][9];

    // Khởi tạo và check từng ô
    for (var i = 0; i < 9; i++) {
        for (var j = 0; j < 9; j++) {
            checkers[i][j] = CheckRange9();
            checkers[i][j].in <== board[i][j];
        }
    }

    // Nhân tích từng hàng
    for (var i = 0; i < 9; i++) {
        products[i][0] <== checkers[i][0].isValid;
        for (var j = 1; j < 9; j++) {
            products[i][j] <== products[i][j-1] * checkers[i][j].isValid;
        }
    }

    // Nhân tích kết quả từng hàng để ra kết quả cuối cùng
    signal rowProducts[9];
    rowProducts[0] <== products[0][8];
    for (var i = 1; i < 9; i++) {
        rowProducts[i] <== rowProducts[i-1] * products[i][8];
    }

    isValid <== rowProducts[8];
}

component main { public [board] } = SudokuRangeValidator();

/* INPUT = {
  "board": [
    [1,3,4,6,7,8,9,1,2],
    [6,7,2,1,9,5,3,4,8],
    [1,9,8,3,4,2,5,6,7],
    [8,5,9,7,6,1,4,2,3],
    [4,2,6,8,5,3,7,9,1],
    [7,1,3,9,2,4,8,5,6],
    [9,6,1,5,3,7,2,8,4],
    [2,8,7,4,1,9,6,3,5],
    [3,4,5,2,8,6,1,7,9]
  ]
}*/ 